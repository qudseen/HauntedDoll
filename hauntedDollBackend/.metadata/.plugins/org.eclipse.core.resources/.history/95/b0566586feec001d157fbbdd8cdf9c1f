package com.development.dao;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Map;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Set;
import java.util.List;
import java.util.Date;
import java.util.LinkedList;

import com.development.domain.Cart;
import com.development.domain.DollSize;
import com.development.domain.Order;
import static com.development.dao.DBConstants.*;

public class OrderDAO {

	private Connection connection;
    DbDAO dbDAO;  // for common DB methods
    
	public OrderDAO(DbDAO db) {
		dbDAO = db;
		connection = db.getConnection();
	}

	public List<Order> getOrders(int userid) throws SQLException {
		String sqlString =
			"SELECT o.*, s.*, n.*, u.*, eot.* "
			+ "FROM " + ORDER_TABLE + " o LEFT OUTER JOIN " + DOLL_EXTRA_OPTIONS_TABLE + " eot " +
			" ON o.id = eot.order_id " +
			"JOIN " + DOLL_SIZES_TABLE + " s ON o.size_id = s.id " + 
			"JOIN " + DOLL_NAMES_TABLE + " n ON o.name_id = n.id " + 
			"JOIN " + USERS_TABLE + " u ON o.user_id = u.id " + 
			((userid > 0) ? ("WHERE o.user_id = " + userid) : "") +
			" ORDER BY o.id";
		
		Map<Integer, Order> statusMap = new TreeMap<Integer, Order>();
		Statement stmt = connection.createStatement();

		try {
			ResultSet table = stmt.executeQuery(sqlString);

			while (table.next()) {
				int ordNo = table.getInt("order_id");
				Order order = null;
				String extras_name = table.getString("extra_option_name");
				if ((order = (Order) statusMap.get(ordNo)) != null) {
					order.addExtras(extras_name);
				} else {
					List<String> extras = new LinkedList<String>();
					extras.add(extras_name);
					String name = table.getString("username");
					String address = table.getString("address");
					String dollName = table.getString("doll_name");
					String dollSize = table.getString("size_name");
					int day = table.getInt("day");
					int status = table.getInt("status");
					
					order = new Order(ordNo, name, address,	dollName, dollSize, day, status, extras);
					statusMap.put(ordNo, order);
				}
			}
		} finally {
			stmt.close();
		}
		return new LinkedList<Order>(statusMap.values());
	}
	
	
	public void placeOrder(CartDAO cartDAO, int user_id, String address) throws SQLException {
		
		Statement stmt = connection.createStatement();
		try {
			ResultSet set = null;
			set = stmt.executeQuery("SELECT * FROM " + CART_TABLE + " WHERE user_id = " + user_id);
			while (set.next()) {
				int cart_id = set.getInt("id");
				int name_id = set.getInt("name_id");
				int size_id = set.getInt("size_id");
				int status = 1;
				int day = (int) ((new Date().getTime())/1000);

				addToOrders(cart_id, address, name_id, user_id, size_id, day, status);
				
				cartDAO.removeCartItem(cart_id);
			}
		} catch(Exception e){
			throw e;
		}finally {
			stmt.close();
		}
		return;
	}
	
	private void addToOrders(int cart_id, String address, int name_id, int user_id, int size_id, int day, int status) throws SQLException {
		
		Statement stmt = connection.createStatement();
		try {
			stmt.executeUpdate("insert into " + ORDER_TABLE + " (`address`, `name_id`,`user_id`,`size_id`,`day`,`status`) "+
					"VALUES ('"+ address +"',"+ name_id +","+ user_id + ","+ size_id +","+ day +","+ status +")", Statement.RETURN_GENERATED_KEYS);
			ResultSet rs = stmt.getGeneratedKeys();
	        int order_id = rs.getInt(1);
		    
	        // get extras from cart extras table
	        rs = stmt.executeQuery("select * from " + CART_EXTRA_OPTIONS_TABLE + " where cart_id = " + cart_id);

	        if (rs.next()) {
		    	// insert into extras table
	    		String name = rs.getString("extra_option_name");
	    		stmt.execute("insert into " + DOLL_EXTRA_OPTIONS_TABLE + " (`order_id`, `extra_option_name`) "+ "VALUES ("+ order_id +",'"+ name +"')");
		    }
		} catch(Exception e){
			throw e;
		}finally {
			stmt.close();
		}
		
		return;

	}

}
